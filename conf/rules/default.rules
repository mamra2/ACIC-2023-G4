// Device & Wallpug
rule "Toggle Wallplug"
    when
        Item MyDeviceIsOnline changed
    then
        Wallplug_Hall.sendCommand(MyDeviceIsOnline.state.toString)
end

// Telegram
rule "Receive Message (on Telegram)"
    when 
        //Change this trigger message
        Item Telegram_Message received update "message test"
    then
        var message = Telegram_Message.state.toString
        val bot = getActions("telegram","telegram:telegramBot:telegrambot")
        if (message == "ON" || message == "OFF") {
            Test_Switch.sendCommand(message)
            bot.sendTelegram("Switch changed state to " + message)
        }
        else {
            bot.sendTelegram("Switch didn't change state because the message sent was \n\"" + message + "\"")
        }
        // Send to Henrique
        //bot.sendTelegram(5680556583L, "This is a message for you, Henrique!")
end
rule "Query (on Telegram)"
    when
        //Change this trigger message
        Item Telegram_Message received update "reply test"
    then
        val telegramBot = getActions("telegram","telegram:telegramBot:telegrambot")
        telegramBot.sendTelegramQuery("Do you also want to receive a notification through e-mail?", "Telegram_Reply", "Yes", "No")
end
rule "Reply (on Telegram)"
    when
        Item Telegram_ReplyId received update "Telegram_Reply"
    then
        val telegramBot = getActions("telegram","telegram:telegramBot:telegrambot") 
        var message = Telegram_Message.state.toString
        var notificationConfirmation = (
            if (message == "Yes") ("E-mail") 
            else if (message == "No") ("No"))
        telegramBot.sendTelegramAnswer(Telegram_ReplyId.state.toString, notificationConfirmation + " notification was sent.")
end

// Twitter
rule "Send tweet (on Twitter)"
    when
        Item Test_Switch received update
//        Item Telegram_Message received update "Send Tweet"
    then
        val tweetActions = getActions("twitter","twitter:account:account")
        // Send tweet
        val mention = "@openHAB"
        val tweetMessage = "This is a new Tweet sent for a uni project " + "(with " + mention + ")"
        tweetActions.sendTweet(tweetMessage)
        logInfo("Twitter", "Twitter sent with message \"" + tweetMessage + "\"")
end

// Mail
rule "Send e-mail"
    when 
//        Item Test_Switch received update
        Item Telegram_Message received update "Send e-mail"
    then
        val receiver = "mamra2@iscte-iul.pt"
        val mailSubject = "[ACIC] openHAB (Teste de Laboratório)"
        val mailContent = "Para efeitos de laboratório, envia-se esta mensagem."
        val mailActions = getActions("mail","mail:smtp:smtp")
        mailActions.sendMail(receiver, mailSubject, mailContent)
end

// IFTTT
rule "Send IFTTT Notification"
    when
//        Item Test_Switch received update
        Item Telegram_Message received update "Send IFTTT Notification"
    then
        logInfo("LineBlock","\n" 
            + "//======================================================================================================================================================//")
        // Item Values
        var item = Test_Switch
        var itemName = item.name
        var itemState = item.state

        // IFTTT parameters
        var String ifttt_event = 'OH_Alarm'
        var String ifttt_key = 'opv4AxqQo6hB48Td9nep-E_Y4SKpDPUHNLAkO2izXCx'
        var String ifttt_values = '?value1=' + itemName + '&value2=' + itemState
        var String ifttt_url = 'https://maker.ifttt.com/trigger/' + ifttt_event + '/with/key/' + ifttt_key + ifttt_values

        // POST HTTP Request
        sendHttpPostRequest(ifttt_url)
        logInfo("IFTT", "IFTTT Notification => " + "Item {} has state {}.", itemName, itemState)
        logInfo("URL", "Sent to \nURL \"{}\"", ifttt_url)
end

// LoRa
rule "Publish MQTT Topic"
    when 
//        Item Test_Switch received update
        Item Telegram_Message received update "Publish MQTT topic"
    then
        val topic = "v3/ttn-backdior-app@ttn/devices/eui-0025ca0a00014919/up"
        val value = "The temperature is " + LoRa_AirTemperature.state.toString
        logInfo("LoRa", "LoRa Air Temperature is {}", LoRa_AirTemperature.state.toString)
        val retained = true
        val mqttActions = getActions("mqtt","mqtt:broker:broker")
        mqttActions.publishMQTT(topic, value, retained)
end